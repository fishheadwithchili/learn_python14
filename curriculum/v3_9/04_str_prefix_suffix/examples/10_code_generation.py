"""
场景 10：代码生成

应用：移除代码模板标记，处理代码注释，提取代码片段
"""

# 测试数据
code_snippets = [
    "// TODO: Implement this function",
    "# FIXME: Bug in login logic",
    "/* NOTE: This is important */",
    "// Generated code - DO NOT EDIT",
    "Regular code comment"
]

function_signatures = [
    "def test_user_login():",
    "def test_password_reset():",
    "async def fetch_data():",
    "staticmethod def helper():"
]

variable_declarations = [
    "private string m_userName;",
    "public int count;",
    "protected bool isActive;",
    "const int MAX_SIZE = 100;"
]

print("=" * 60)
print("场景 10：代码生成和处理")
print("=" * 60)

# 示例 1：提取 TODO/FIXME 注释
print("\n[示例 1] 提取待办事项注释：\n")

tags = ["TODO:", "FIXME:", "NOTE:", "HACK:", "XXX:"]
comment_prefixes = ["//", "#", "/*", "*/"]

for snippet in code_snippets:
    # 移除注释符号
    content = snippet
    for prefix in comment_prefixes:
        content = content.removeprefix(prefix).strip()
    
    # 检测标签
    tag_found = None
    message = content
    
    for tag in tags:
        if content.startswith(tag):
            tag_found = tag.removesuffix(":")
            message = content.removeprefix(tag).strip()
            break
    
    if tag_found:
        print(f"  [{tag_found}] {message}")
        print(f"    原始: {snippet}")

# 示例 2：移除测试函数前缀
print("\n[示例 2] 提取测试函数名：\n")

for func_sig in function_signatures:
    # 移除函数定义关键字
    func_name = (func_sig
                 .removeprefix("def ")
                 .removeprefix("async def ")
                 .removeprefix("staticmethod def "))
    
    # 移除参数部分
    if "(" in func_name:
        func_name = func_name.split("(")[0]
    
    # 移除 test_ 前缀
    clean_name = func_name.removeprefix("test_")
    
    if clean_name != func_name:
        print(f"  测试: {func_sig}")
        print(f"    测试目标: {clean_name}")

# 示例 3：移除访问修饰符
print("\n[示例 3] 提取变量名（移除修饰符）：\n")

access_modifiers = ["private ", "public ", "protected ", "static ", "const "]

for var_decl in variable_declarations:
    # 移除访问修饰符
    clean_decl = var_decl
    removed_modifiers = []
    
    for modifier in access_modifiers:
        if clean_decl.startswith(modifier):
            removed_modifiers.append(modifier.strip())
            clean_decl = clean_decl.removeprefix(modifier)
    
    # 提取变量名
    if " " in clean_decl:
        var_type, rest = clean_decl.split(" ", 1)
        var_name = rest.split("=")[0].strip().rstrip(";")
        
        print(f"  原始: {var_decl}")
        print(f"    修饰符: {removed_modifiers}")
        print(f"    类型: {var_type}")
        print(f"    变量名: {var_name}")

# 示例 4：代码模板处理
print("\n[示例 4] 代码模板标记移除：\n")

template_code = [
    "// <auto-generated>",
    "// This file was generated by a tool.",
    "// </auto-generated>",
    "class MyClass {",
    "    // Actual code",
    "}"
]

print("移除生成标记:")
for line in template_code:
    # 检测自动生成标记
    if line.strip().startswith("//") and ("auto-generated" in line or "generated by" in line):
        print(f"  (移除) {line}")
    else:
        print(f"  (保留) {line}")

# 示例 5：移除文件头注释
print("\n[示例 5] 处理文件头版权注释：\n")

file_header = [
    "#!/usr/bin/env python",
    "# -*- coding: utf-8 -*-",
    "#",
    "# Copyright (c) 2023 Company Name",
    "# All rights reserved.",
    "#",
    "",
    "import os",
    "import sys"
]

print("提取实际代码（跳过头部）:")
in_header = True
for line in file_header:
    is_comment = line.strip().startswith("#") or line.strip().startswith("//")
    is_empty = line.strip() == ""
    is_shebang = line.startswith("#!")
    is_encoding = "-*-" in line
    
    if in_header and (is_comment or is_empty or is_shebang or is_encoding):
        continue
    else:
        in_header = False
        if line.strip():
            print(f"  {line}")

# 示例 6：SQL 注释处理
print("\n[示例 6] SQL 注释处理：\n")

sql_lines = [
    "-- This is a comment",
    "SELECT * FROM users",
    "-- WHERE clause",
    "WHERE active = 1;"
]

print("移除 SQL 注释:")
for line in sql_lines:
    clean_line = line
    
    # 移除 -- 注释
    if "--" in line:
        clean_line = line.split("--")[0].strip()
    
    if clean_line:
        print(f"  {clean_line}")

# 示例 7：提取方法体
print("\n[示例 7] 提取方法体（移除修饰符）：\n")

method_definitions = [
    "@staticmethod",
    "@cached_property",
    "def calculate_total(self, items):",
    "    return sum(items)"
]

print("处理方法定义:")
for i, line in enumerate(method_definitions):
    # 移除装饰器
    if line.strip().startswith("@"):
        print(f"  装饰器: {line.strip()}")
    elif line.strip().startswith("def "):
        method_sig = line.strip().removeprefix("def ")
        print(f"  方法签名: {method_sig}")
    else:
        print(f"  方法体: {line}")

# 示例 8：命名空间处理
print("\n[示例 8] 命名空间/包名处理：\n")

fully_qualified_names = [
    "com.example.myapp.MainActivity",
    "org.apache.commons.lang.StringUtils",
    "java.util.List"
]

print("提取类名:")
for fqn in fully_qualified_names:
    parts = fqn.split(".")
    package = ".".join(parts[:-1])
    class_name = parts[-1]
    
    print(f"  完整名称: {fqn}")
    print(f"    包名: {package}")
    print(f"    类名: {class_name}")

# 示例 9：提取代码块
print("\n[示例 9] Markdown 代码块提取：\n")

markdown_code_block = [
    "```python",
    "def hello():",
    "    print('Hello, World!')",
    "```"
]

code_start = "```python"
code_end = "```"

in_code_block = False
code_lines = []

for line in markdown_code_block:
    if line.strip() == code_start:
        in_code_block = True
        print("  (代码块开始)")
    elif line.strip() == code_end:
        in_code_block = False
        print("  (代码块结束)")
    elif in_code_block:
        print(f"  代码: {line}")

print("\n💡 总结：removeprefix/removesuffix 简化代码解析和生成")

